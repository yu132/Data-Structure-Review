package common.ag.subsequence.longestIncreasingSubsequence;

public class Introducing {

	/**
	 * 最长上升子序列是一种非常常见的问题，最经典的表示就是在一个数组里面
	 * 找到一段最长的上升子序列，即后面的元素总是大于之前的元素的，
	 * 能相等则为最长不下降子序列
	 * 
	 * 很多种类的问题都可以转化成这个问题来求解
	 * 
	 * （1）需要删除最少的元素使得某个序列有序：
	 * 		从低到高则是从左到右的LIS
	 * 		从高到低则是从右到左的LIS
	 * 
	 * （2）二维嵌套，一个矩形需要套在另一个矩形内(leetcode-354)
	 * 		当且仅当一个矩形的长和宽都比另一个矩形小，
	 * 		而且矩形不能旋转
	 * 
	 * 		这个问题需要先将一维进行排序，另一维则是最长上升子序列，
	 * 		即可算出能嵌套的最大层数
	 */

}
